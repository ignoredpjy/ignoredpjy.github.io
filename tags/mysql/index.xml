<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mysql on PJY&#39;s Blog</title>
    <link>https://ignoredpjy.github.io/tags/mysql/</link>
    <description>Recent content in mysql on PJY&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Build by pjy</copyright>
    <lastBuildDate>Mon, 27 Nov 2023 16:17:41 +0800</lastBuildDate><atom:link href="https://ignoredpjy.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql原理</title>
      <link>https://ignoredpjy.github.io/posts/study/mysql%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 27 Nov 2023 16:17:41 +0800</pubDate>
      
      <guid>https://ignoredpjy.github.io/posts/study/mysql%E5%8E%9F%E7%90%86/</guid>
      <description>索引（B+树） 提到mysql索引，就不会不提：B+ 树 、B-树 和 红黑树
InnoDB 是最常用的存储引擎，B+树是InnoDB默认的索引机制。
B+树 VS B-树 VS 红黑树 磁盘知识 分页：
现代操作系统都使用虚拟内存来印射到物理内存，内存大小有限且价格昂贵，所以数据的持久化是在磁盘上。虚拟内存、物理内存、磁盘都使用页作为内存读取的最小单位。一般一页为4KB（8个扇区，每个扇区512B，8*512B=4KB）
局部性原理：
时间局部性：一个被引用过一次的内存位置很可能在不远的将来再次被多次引用。 空间局部性：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。 顺序局部性（Order Locality）：在典型程序中，除转移类指令外，大部分指令是顺序进行的。顺序执行和非顺序执行的比例大致是5:1。此外，对大型数组访问也是顺序的。 磁盘IO速度 &amp;amp; 预读
速度：CPU &amp;raquo; Cache &amp;raquo;&amp;gt; 主内存 &amp;raquo;&amp;raquo; 磁盘， 磁盘读取的速度远小于内存，所以尽量减少 I/O 次数是提高效率的关键。
考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部性原理。而且即使只需要读取一个字节，磁盘也会读取一页的数据。
查找树知识 二叉平衡树/二叉查找树
平衡树是为了防止二叉查找树退化为链表，而红黑树在维持平衡以确保 O(log2(n)) 的同时，不需要频繁着调整树的结构；
AVL树是最先发明的自平衡二叉查找树，AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。通过旋转来实现自平衡 2-3 树，要求严格的平衡，通过允许3节点，减少自平衡次数 红黑树，不要求严格平衡，减少自平衡次数 b+/b-树
B树/B-树：所有节点存储数据和指针(索引)；
B+树
非叶子节点存储指针 (索引)，叶子节点存储数据； 每个叶子节点有一个指针指向下一个节点，构成一个有序链表 为什么不使用二叉树/红黑树，使用B+树 单拎出来一点，就已经足够否决的了
**为磁盘而生：**二叉树无法使用磁盘预读功能 , B树专门为磁盘读取而设计，B树的节点大小与磁盘页大小相匹配（InnoDB中页的大小 默认为 16 KB。） **更少的 IO 次数：**树的深度也会影响查询的效率，随着数据量增加，二叉树深度增长飞快，会造成查询时磁盘IO频繁读写，（B+树高度通常不超过3+1） **额外的平衡开销：**二叉树一次插入+平衡的过程，会涉及大量的磁盘I/O操作 更适于范围查询：二叉树存储在磁盘中，范围查询的效率极低，基本不支持范围查询 为什么不使用B-树，使用B+树 B+树非叶子节点仅存储索引不存储data，这样一个节点就可以存储更多的索引，可以使得B+树相对B树来说更矮（IO次数就是树的高度），所以I/O 次数更少
B+树所有叶子节点构成一个 有序链表，按主键排序来遍历全部记录，能更好支持范围查找和区间查找。而B树每个节点都可能查找到数据，相邻的元素可能在不同节点上，在内存中不相邻，所以范围查找时需要在叶子节点和子节点不停的往返移动，效率较低且不稳定
文件系统使用B-树，mongoDB使用B-树：
MongoDB 是一种 nosql，也存储在磁盘上，被设计用在 数据模型简单，性能要求高的场合。性能要求高，看看B/B+树的区别第一点：</description>
      <content:encoded><![CDATA[<h1 id="索引b树">索引（B+树）</h1>
<p>提到mysql索引，就不会不提：B+ 树 、B-树 和 红黑树</p>
<p>InnoDB 是最常用的存储引擎，B+树是InnoDB默认的索引机制。</p>
<h2 id="b树-vs-b-树-vs-红黑树">B+树 VS B-树 VS 红黑树</h2>
<h3 id="磁盘知识">磁盘知识</h3>
<ul>
<li>
<p><strong>分页：</strong></p>
<p>现代操作系统都使用虚拟内存来印射到物理内存，内存大小有限且价格昂贵，所以数据的持久化是在磁盘上。虚拟内存、物理内存、磁盘都使用页作为内存读取的最小单位。一般一页为<strong>4KB</strong>（8个扇区，每个扇区512B，8*512B=4KB）</p>
</li>
<li>
<p><strong>局部性原理：</strong></p>
<ul>
<li>时间局部性：一个被引用过一次的内存位置很可能在不远的将来再次被多次引用。</li>
<li>空间局部性：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。</li>
<li>顺序局部性（Order Locality）：在典型程序中，除转移类指令外，大部分指令是顺序进行的。顺序执行和非顺序执行的比例大致是5:1。此外，对大型数组访问也是顺序的。</li>
</ul>
</li>
<li>
<p><strong>磁盘IO速度 &amp; 预读</strong></p>
<p>速度：CPU &raquo; Cache &raquo;&gt; 主内存 &raquo;&raquo; 磁盘，
磁盘读取的速度远小于内存，所以尽量减少 I/O 次数是提高效率的关键。</p>
<p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部性原理。而且即使只需要读取一个字节，磁盘也会读取一页的数据。</p>
</li>
</ul>
<h3 id="查找树知识">查找树知识</h3>
<ul>
<li>
<p>二叉平衡树/二叉查找树</p>
<blockquote>
<p>平衡树是为了防止二叉查找树退化为链表，而红黑树在维持平衡以确保 O(log2(n)) 的同时，不需要频繁着调整树的结构；</p>
</blockquote>
<ul>
<li>AVL树是<strong>最先发明的自平衡二叉查找树</strong>，AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。<a href="https://infinityglow.github.io/study/algorithm/transform-and-conquer/AVL-tree/">通过旋转来实现自平衡</a></li>
<li>2-3 树，要求严格的平衡，通过允许3节点，减少自平衡次数</li>
<li>红黑树，不要求严格平衡，减少自平衡次数</li>
</ul>
</li>
<li>
<p>b+/b-树</p>
<ul>
<li>
<p>B树/B-树：所有节点存储<strong>数据</strong>和<strong>指针(索引)</strong>；</p>
</li>
<li>
<p>B+树</p>
<ul>
<li>非叶子节点存储<strong>指针 (索引)</strong>，叶子节点存储<strong>数据</strong>；</li>
<li>每个叶子节点有一个指针指向下一个节点，构成一个有序链表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="为什么不使用二叉树红黑树使用b树">为什么不使用二叉树/红黑树，使用B+树</h3>
<blockquote>
<p>单拎出来一点，就已经足够否决的了</p>
</blockquote>
<ul>
<li>**为磁盘而生：**二叉树无法使用磁盘预读功能 , B树专门为磁盘读取而设计，B树的节点大小与磁盘页大小相匹配（InnoDB中页的大小 默认为 16 KB。）</li>
<li>**更少的 IO 次数：**树的深度也会影响查询的效率，随着数据量增加，二叉树深度增长飞快，会造成查询时磁盘IO频繁读写，（B+树高度通常不超过3+1）</li>
<li>**额外的平衡开销：**二叉树一次插入+平衡的过程，会涉及大量的磁盘I/O操作</li>
<li><strong>更适于范围查询</strong>：二叉树存储在磁盘中，范围查询的效率极低，基本不支持范围查询</li>
</ul>
<h3 id="为什么不使用b-树使用b树">为什么不使用B-树，使用B+树</h3>
<p>B+树非叶子节点仅存储索引不存储data，这样一个节点就可以存储更多的索引，可以使得B+树相对B树来说更矮（IO次数就是树的高度），所以<strong>I/O 次数更少</strong></p>
<p>B+树所有叶子节点构成一个 <em>有序链表</em>，按主键排序来遍历全部记录，能更好支持<strong>范围查找</strong>和<strong>区间查找</strong>。而B树每个节点都可能查找到数据，相邻的元素可能在不同节点上，在内存中不相邻，所以范围查找时需要在叶子节点和子节点不停的往返移动，<strong>效率较低且不稳定</strong></p>
<p><strong>文件系统使用B-树</strong>，<strong>mongoDB使用B-树</strong>：</p>
<p>MongoDB 是一种 nosql，也存储在磁盘上，被设计用在 数据模型简单，性能要求高的场合。性能要求高，看看B/B+树的区别第一点：</p>
<blockquote>
<p>B+树内节点不存储数据，所有 data 存储在叶节点导致查询时间复杂度固定为 log n。而B-树查询时间复杂度不固定，与 key 在树中的位置有关，最好为O(1)</p>
</blockquote>
<p>我们说过，尽可能少的磁盘 IO 是提高性能的有效手段。MongoDB 是聚合型数据库，而 B-树恰好 key 和 data 域聚合在一起。</p>
<h3 id="为什么不使用hashskiplist">为什么不使用Hash、SkipList</h3>
<p>待续</p>
<h2 id="页内查询">页内查询</h2>
<p><strong>使用的是二分查找</strong></p>
<p>InnoDB的页结构：表头槽数组+最小值+最大值：列链表</p>
<p>通过最小最大是否跳过该页，通过二分确定索引所在的槽，每个槽最多8个列数据，直接遍历</p>
<p>细节待续</p>
<h2 id="页分裂">页分裂</h2>
<ul>
<li>InnoDB(聚簇索引)的主键值最好是有序的，不仅能充分使用到索引，还尽可能避免了页分裂；否则就必须进行页分裂来保证索引的逻辑正确性；</li>
<li>InnoDB 的主键，尽量使用连续增长的值，而不是随机值(比如随机字符串或UUID), 否则可能产生大量的页分裂；</li>
<li>InnoDB的B+树索引注意事项：根页面的位置万年不动，一个页面最少存储2条记录。</li>
</ul>
<p>原理待续</p>
<h2 id="索引代价">索引代价</h2>
<ul>
<li>
<p><strong>空间上的代价</strong></p>
<p>这个是显而易见的，每建立一个索引都要为它建立一棵 B+ 树，每一棵 B+ 树的每一个节点都是一个数据页， 一个页默认会占用 16KB 的存储空间，一棵很大的 B+ 树由许多数据页组成，那可是很大的一片存储空间呢。</p>
</li>
<li>
<p><strong>时间上的代价</strong></p>
<p>每次对表中的数据进行增、删、改操作时，都需要去修改各个 B+ 树索引。而且我们讲过， B+ 树每层节点都 是按照索引列的值从小到大的顺序排序而组成了双向链表。不论是叶子节点中的记录，还是内节点中的记录 （也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而 增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页 面分裂、页面回收啥的操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的 B+ 树都 要进行相关的维护操作，这还能不给性能拖后腿么？</p>
</li>
<li>
<p><strong>回表</strong></p>
<p>最好在查询列表里只包含索引列，避免回表</p>
<p>需要回表的记录越多，使用二级索引的性能就越低，甚至可能不如全表查询，由查询优化器选择。</p>
</li>
</ul>
<h2 id="优化索引">优化索引</h2>
<p><strong>explain各个字段代表的意思</strong></p>
<ul>
<li>
<p>id ：select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p>
</li>
<li>
<p>select_type ：查询类型 或者是 其他操作类型，单表简单、父子查询</p>
<p>SIMPLE、UNION、PRIMARY、SUBQUERY、UNION RESULT</p>
</li>
<li>
<p>table ：正在访问哪个表</p>
</li>
<li>
<p>partitions ：匹配的分区</p>
</li>
<li>
<p>type ：访问的类型</p>
</li>
<li>
<p>possible_keys ：显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</p>
</li>
<li>
<p>key ：实际使用到的索引，如果为NULL，则没有使用索引</p>
</li>
<li>
<p>key_len ：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</p>
</li>
<li>
<p>ref ：显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</p>
</li>
<li>
<p>rows ：根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</p>
</li>
<li>
<p>filtered ：查询的表行占表的百分比</p>
</li>
<li>
<p>Extra ：包含不适合在其它列中显示但十分重要的额外信息</p>
</li>
</ul>
<p><strong>type</strong></p>
<p>NULL  &gt; system  &gt; const  &gt;  eq_ref &gt;  ref &gt;  ref_or_null &gt;  index_merge &gt;  range &gt;  index &gt;  ALL</p>
<ul>
<li>
<p><code>NULL</code> MySQL能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引</p>
</li>
<li>
<p><code>SYSTEM</code> 表只有一行记录（等于系统表），这是<code>const</code>类型的特列，平时不大会出现，可以忽略。</p>
</li>
<li>
<p><code>const</code> 表示通过索引一次就找到了，<code>const</code>用于比较<code>primary key</code>或<code>uique</code>索引，因为只匹配一行数据，所以很快，如主键置于<code>where</code>列表中，MySQL就能将该查询转换为一个常量。</p>
</li>
<li>
<p><code>eq_ref</code> 用于联表查询的情况，按联表的主键或唯一键联合查询。</p>
<p>多表<code>join</code>时，对于来自前面表的每一行，在<strong>当前表中只能找到一行</strong>。这可能是除了<code>system</code>和<code>const</code>之外最好的类型。当主键或唯一非<code>NULL</code>索引的所有字段都被用作<code>join</code>联接时会使用此类型。</p>
</li>
<li>
<p><code>ref</code> 可以用于单表扫描或者连接。如果是连接的话，驱动表的一条记录能够在被驱动表中通过非唯一（主键）属性所在索引中匹配多行数据，或者是在单表查询的时候通过非唯一（主键）属性所在索引中查到一行数据。</p>
</li>
<li>
<p><code>ref_or_null</code> 类似ref，但是可以搜索值为<code>NULL</code>的行</p>
</li>
<li>
<p><code>index_merge</code> 表示查询使用了两个以上的索引，最后取交集或者并集，常见<code>and </code>，<code>or</code>的条件使用了不同的索引，官方排序这个在<code>ref_or_null</code>之后，但是实际上由于要读取多个索引，性能可能大部分时间都不如<code>range</code>。</p>
</li>
<li>
<p><code>range</code> 索引范围查询，常见于使用 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()或者like等运算符的查询中。</p>
</li>
<li>
<p><code>index</code> <code>index</code>只遍历索引树，通常比<code>All</code>快。因为，索引文件通常比数据文件小，也就是虽然<code>all</code>和<code>index</code>都是读全表，但<code>index</code>是从索引中读取的，而<code>all</code>是从硬盘读的。</p>
</li>
<li>
<p><code>ALL</code> 如果一个查询的<code>type</code>是<code>All</code>,并且表的数据量很大，那么请解决它！！！</p>
</li>
</ul>
<p><strong>Extra</strong></p>
<ul>
<li><code>Using filesort</code> 表示当SQL中有一个地方需要对一些数据进行排序的时候，优化器找不到能够使用的索引，所以只能使用外部的索引排序，外部排序就不断的在磁盘和内存中交换数据，这样就摆脱不了很多次磁盘IO，以至于SQL执行的效率很低。</li>
<li><code>Using tempporary</code> 表示在对MySQL查询结果进行排序时，使用了临时表</li>
<li><code>Using index</code> 表示使用了索引，很优秀。</li>
<li><code>Using where</code> 使用了<code>where</code>但是好像没啥用。</li>
<li><code>Using join buffer</code> 表明使用了连接缓存,比如说在查询的时候，多表<code>join</code>的次数非常多，那么将配置文件中的缓冲区的<code>join buffer</code>调大一些。</li>
<li><code>impossible where</code> 筛选条件没能筛选出任何东西</li>
<li><code>distinct</code> 优化<code>distinct</code>操作，在找到第一匹配的元组后即停止找同样值的动作</li>
</ul>
<p><strong>optimizer trace</strong></p>
<p>待续</p>
<h2 id="索引失效">索引失效</h2>
<ul>
<li>对索引使用函数、运算、类型转换</li>
<li>like 没有使用左模糊匹配</li>
<li>使用 不等于  !=、&lt;&gt;</li>
<li>使用  index &lt; [] or index &gt; []</li>
<li>使用 or ，且条件不全为索引</li>
<li>使用 not in</li>
<li>组合索引非最左匹配， 右边失效</li>
<li>order by 使用外部排序</li>
<li>查询结果集超过全表10%（默认值），使用全表扫描</li>
</ul>
<h1 id="索引其他">索引（其他）</h1>
<p>待续</p>
<h2 id="倒排索引全文索引">倒排索引（全文索引）</h2>
<h2 id="自适应hash索引">自适应Hash索引</h2>
<p><strong>hash索引</strong></p>
<p>缺点：</p>
<ul>
<li>Hash索引仅能满足=, &lt;&gt;, IN查询，不能使用范围查询，</li>
<li>同时因为数据的存储是没有顺序的，所以在ORDER BY的情况下，还需要对数据重新进行排序。</li>
<li>使用联合索引时，Hash值是针对联合索引建合并后一起来计算Hash值，因此无法对单独的一个键或者几个索引键进行查询。</li>
</ul>
<p>优点：</p>
<ul>
<li>因为Hash索引结构的特点，导致它的检索数据效率非常高，通常只需要O(1)的复杂度，也就是一次就可以完成数据的检索。</li>
</ul>
<p>虽然Hash索引的使用场景有很多限制，但是优点也很明显，所以Innodb提供了一个<strong>自适当Hash索引</strong>的功能（Adaptive Hash index）。</p>
<blockquote>
<p>这里的自适应指的是不需要人工来制定，而是系统根据情况来自动完成的。</p>
</blockquote>
<p>那什么情况下才会使用自适应Hash索引呢？如果某个数据经常会访问到，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。需要说明的是：</p>
<ul>
<li>自适应哈希索引只保存热数据（经常被使用到的数据），并非全表数据。因此数据量并不会很大，可以让自适应Hash放到缓冲池中，也就是InnoDB buffer pool，进一步提升查找效率。</li>
<li>InnoDB中的自适应Hash相当于是“索引的索引”，采用Hash索引存储的是B+树索引中的页面的地址。这也就是为什么可以称自适应Hash为索引的索引。 采用自适应Hash索引目的是可以根据SQL的查询条件加速定位到叶子节点，特别是当B+树比较深的时候，通过自适应Hash索引可以提高数据的检索效率。</li>
<li>自适应Hash采用Hash函数映射到一个哈希表中，所以对于字典类型的数据查找非常方便 哈希表是数组+链表的形式。通过Hash函数可以计算索引键值所对应的bucket（桶）的位置，如果产生Hash冲突，如果产生哈希冲突，就需要遍历链表来解决。</li>
<li>是否开启了自适应Hash，可以通过innodb_adaptive_hash_index变量来查看，比如：mysql&gt; show variables like &lsquo;%adaptive_hash_index&rsquo;;</li>
</ul>
<p>所以，总结下InnoDB本身不支持Hash，但是提供自适应Hash索引，不需要用户来操作，而是存储引擎自动完成的。自适应Hash也是InnoDB三大关键特性之一，另外两个分别是插入缓冲（<strong>Insert Buffer</strong>）和二次写(<strong>Double Write</strong>)。</p>
<h2 id="空间索引">空间索引</h2>
<h1 id="事务">事务</h1>
<h2 id="锁">锁</h2>
<h3 id="共享锁独占锁">共享锁&amp;独占锁</h3>
<h3 id="表锁行锁意向锁">表锁、行锁、意向锁</h3>
<h3 id="innodb中的行锁">InnoDB中的行锁</h3>
<ul>
<li>
<p>记录锁（record lock）</p>
</li>
<li>
<p>间隙锁（gap lock）</p>
<p>gap lock是共享锁，可叠加——死锁因素</p>
</li>
<li>
<p>next-key lock</p>
</li>
<li>
<p>隐式锁（insert lock）</p>
<p>本质为 gap锁</p>
</li>
<li>
<p>AUTO-INC 锁</p>
</li>
</ul>
<h3 id="死锁">死锁</h3>
<h2 id="mvcc">MVCC</h2>
<h3 id="版本链">版本链</h3>
<h3 id="readview">ReadView</h3>
<h3 id="可能的回表操作">可能的回表操作</h3>
<p><a href="https://juejin.cn/post/6844904017068294152">https://juejin.cn/post/6844904017068294152</a></p>
<p>待续</p>
<h3 id="undo-log的删除时机">undo log的删除时机</h3>
<h2 id="日志">日志</h2>
<p>redo undo bin</p>
<h1 id="mysql-server">mysql server</h1>
<h2 id="连接管理">连接管理</h2>
<h2 id="sql执行器">sql执行器</h2>
<p>预处理器  ——》优化器 ——》执行器</p>
<h2 id="查询优化">查询优化</h2>
<h2 id="存储引擎">存储引擎</h2>
<h1 id="innodb">InnoDB</h1>
<h2 id="存储引擎对比">存储引擎对比</h2>
<table>
<thead>
<tr>
<th style="text-align:center">引擎</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">InnoDB</td>
<td style="text-align:center">支持事务、行锁、外键等高级特性，主键聚簇。具有良好的性能和可靠性。MySQL默认的存储引擎。</td>
</tr>
<tr>
<td style="text-align:center">MyISAM</td>
<td style="text-align:center">由ISAM（Indexed Sequential Access Metod）引擎改良，可移植性好，占用空间小，但是表级别的锁使得并发读写性能较差，适用于只有查询或者读多写少的场景，如：服务配置存储等。</td>
</tr>
<tr>
<td style="text-align:center">Memory</td>
<td style="text-align:center">又被叫做：Heap，数据存储在内存中，可靠性较低，一般用于临时表场景使用。另外 InnoDB 也支持内存缓存可以大量甚至全部数据载入内存，所以这个引擎使用场景越来越少了。</td>
</tr>
<tr>
<td style="text-align:center">CSV</td>
<td style="text-align:center">数据通过 CSV(Comma-Separated Values)的格式存储，可读性和可操作性非常好，但是由于数据未经过索引，性能很差，所以一般用于将其他表中的数据导过来用于与其他应用交互。</td>
</tr>
<tr>
<td style="text-align:center">Archive</td>
<td style="text-align:center">支持压缩，无索引，适用于存储大量冷门归档数据。</td>
</tr>
<tr>
<td style="text-align:center">Blackhole</td>
<td style="text-align:center">黑洞，不存储数据，查询也都会返回空。但这也并不代表这个引擎没有实际价值，它虽然不存储数据但是 binlog 还是会有，所以经常用于做为伪从库减轻主库压力或者记录binlog用。</td>
</tr>
<tr>
<td style="text-align:center">NDB</td>
<td style="text-align:center">全称Network DataBase，是一个分布式存储引擎。</td>
</tr>
<tr>
<td style="text-align:center">Merge</td>
<td style="text-align:center">可以用于将一系列 MyISM 抽象为一张表。</td>
</tr>
<tr>
<td style="text-align:center">Federated</td>
<td style="text-align:center">可以将其他远程数据的表映射到本地。</td>
</tr>
<tr>
<td style="text-align:center">Example</td>
<td style="text-align:center">主要是一个 demo，供开发人员学习如何开发一个存储引擎。</td>
</tr>
</tbody>
</table>
<p>各引擎支持的功能特性对比：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Feature</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">Memory</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">Archive</th>
<th style="text-align:center">NDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>B树索引</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>备份/恢复</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>分布式集群支持</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>聚簇索引</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>数据压缩</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>数据缓存</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>数据加密</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>外键</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>全文搜索（倒排）</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>地理空间数据</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>地理空间索引</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>散列索引</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>索引缓存</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>锁粒度</strong></td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Table</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
<td style="text-align:center">Row</td>
</tr>
<tr>
<td style="text-align:center"><strong>MVCC</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center"><strong>冗余存储</strong> (note 1)</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Limited</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>存储限制</strong></td>
<td style="text-align:center">256TB</td>
<td style="text-align:center">RAM</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">None</td>
<td style="text-align:center">384EB</td>
</tr>
<tr>
<td style="text-align:center"><strong>T树索引</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>事务</strong></td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><strong>更新数据字典的统计信息</strong></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
</tbody>
</table>
<p>注：关于存储限制虽然上限都很高，但是将数据都存储在一个文件的引擎会受操作系统的文件大小限制（TB级别）。</p>
<p>mysql可以在创建表时，为表单独设置存储引擎</p>
<p>Example，创建一个 MyISAM 的表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1">1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2">2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3">3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4">4</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">exists</span><span class="w"> </span><span class="n">people</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="n">auto_increment</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span><span class="w"> </span><span class="k">null</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">comment</span><span class="w"> </span><span class="s1">&#39;存储人物信息&#39;</span><span class="w"> </span><span class="n">engine</span><span class="o">=</span><span class="s1">&#39;myisam;
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="buffer-pool">Buffer Pool</h2>
<p>LRU-List、Free-List、Flush-List</p>
<h2 id="三大特性">三大特性</h2>
<p><strong>插入缓冲 Insert Buffer</strong></p>
<p><strong>二次写 Double Write</strong></p>
<p><strong>自适应哈希索引（adaptive hash index）</strong></p>
<h2 id="heading"></h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>事务传播机制</title>
      <link>https://ignoredpjy.github.io/posts/study/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/</link>
      <pubDate>Mon, 27 Nov 2023 16:17:41 +0800</pubDate>
      
      <guid>https://ignoredpjy.github.io/posts/study/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/</guid>
      <description>Spring中七种事务传播行为 事务传播行为类型 说明 PROPAGATION_REQUIRED 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。 PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。 PROPAGATION_MANDATORY 使用当前的事务，如果当前没有事务，就抛出异常。 PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。 PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。 PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。 极端的传播 PROPAGATION_MANDATORY
使用外围事务，没有就报错
话说，这样的代码块为什么不直接写到外围方法里，干嘛新建子方法
没错就是为了单纯多写一个方法（程序员的事你少管）
PROPAGATION_NEVER
该方法无法被事务方法调用，一调就报错。
懒惰的传播 NOT_SUPPORTED
管你有没有事务，我就是没有
SUPPORTS
你的就是我的，你没有我也没有
如何触发回滚 该方法向外部抛出了一个异常 回滚是否向外传递 外围方法为 同一事务 ( REQUIRED )，回滚向外传递 外围方法没有try住异常，或者try住之后再次throw，回滚向外传递 （其实就是 外围方法自身触发回滚，本质不是传递） 外围方法是否为父事务(NESTED)，无屌关系 回滚是否向内传递 内部方法为 同一事务 ( REQUIRED )，回滚向内传递 内部方法为 父事务 (NESTED) ，回滚向内传递 REQUIRED （加入事务） 外围方法未开启事务
Propagation.REQUIRED修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。
外围方法开启事务
Propagation.REQUIRED修饰的内部方法会加入到外围方法的事务中，所有Propagation.REQUIRED修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。
REQUIRES_NEW （新的事务） 外围方法未开启事务
同 REQUIRED
外围方法开启事务
Propagation.REQUIRES_NEW修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。
NESTED （子事务） 外围方法未开启事务
同 REQUIRED
外围方法开启事务</description>
      <content:encoded><![CDATA[<h2 id="spring中七种事务传播行为">Spring中七种事务传播行为</h2>
<table>
<thead>
<tr>
<th>事务传播行为类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PROPAGATION_REQUIRED</td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody>
</table>
<h2 id="极端的传播">极端的传播</h2>
<ul>
<li>
<p><strong>PROPAGATION_MANDATORY</strong></p>
<p>使用外围事务，没有就报错</p>
<blockquote>
<p>话说，这样的代码块为什么不直接写到外围方法里，干嘛新建子方法</p>
</blockquote>
<p>没错就是为了单纯多写一个方法（程序员的事你少管）</p>
</li>
<li>
<p><strong>PROPAGATION_NEVER</strong></p>
<p>该方法无法被事务方法调用，一调就报错。</p>
</li>
</ul>
<h2 id="懒惰的传播">懒惰的传播</h2>
<ul>
<li>
<p><strong>NOT_SUPPORTED</strong></p>
<blockquote>
<p>管你有没有事务，我就是没有</p>
</blockquote>
</li>
<li>
<p><strong>SUPPORTS</strong></p>
<blockquote>
<p>你的就是我的，你没有我也没有</p>
</blockquote>
</li>
</ul>
<h2 id="如何触发回滚">如何触发回滚</h2>
<ul>
<li><strong>该方法向外部抛出了一个异常</strong></li>
</ul>
<h2 id="回滚是否向外传递">回滚是否向外传递</h2>
<ul>
<li><strong>外围方法为 <code>同一事务</code> ( REQUIRED )，回滚向外传递</strong></li>
<li><strong>外围方法没有<code>try</code>住异常，或者try住之后再次<code>throw</code>，回滚向外传递</strong> <strong>（其实就是 外围方法自身触发回滚，本质不是传递）</strong></li>
<li><strong>外围方法是否为<code>父事务</code>(NESTED)，无屌关系</strong></li>
</ul>
<h2 id="回滚是否向内传递">回滚是否向内传递</h2>
<ul>
<li><strong>内部方法为 <code>同一事务</code> ( REQUIRED )，回滚向内传递</strong></li>
<li><strong>内部方法为 <code>父事务</code> (NESTED) ，回滚向内传递</strong></li>
</ul>
<h2 id="required--加入事务">REQUIRED  （加入事务）</h2>
<ul>
<li>
<p><strong>外围方法未开启事务</strong></p>
<p><strong><code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p>
</li>
<li>
<p><strong>外围方法开启事务</strong></p>
<p><strong><code>Propagation.REQUIRED</code>修饰的内部方法会加入到外围方法的事务中，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</strong></p>
</li>
</ul>
<h2 id="requires_new--新的事务">REQUIRES_NEW  （新的事务）</h2>
<ul>
<li>
<p><strong>外围方法未开启事务</strong></p>
<p><strong>同 REQUIRED</strong></p>
</li>
<li>
<p><strong>外围方法开启事务</strong></p>
<p><strong><code>Propagation.REQUIRES_NEW</code>修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。</strong></p>
</li>
</ul>
<h2 id="nested--子事务">NESTED  （子事务）</h2>
<ul>
<li>
<p><strong>外围方法未开启事务</strong></p>
<p><strong>同 REQUIRED</strong></p>
</li>
<li>
<p><strong>外围方法开启事务</strong></p>
<p><strong><code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务</strong></p>
</li>
</ul>
<p><a href="https://segmentfault.com/a/1190000013341344#item-3-3">代码试验</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
